[user]
  name = Sander Bouwhuis
  email = sanderb@gmail.com
; email = sander.bouwhuis@reaktor.com

[branch]
  autosetuprebase = always

[alias]
;; Submodule ops
; Execute any command on all subrepos
  subs = submodule foreach --recursive
; Execute git command on this and all subrepos
  all = all-exec git
; Ensure all submodules are checked out at pinned commits
  state = submodule update --init --recursive

;; Branches
  bb = switch
  ba = switch --track
  bc = "!f() { git switch -c $(slugify \"$*\"); }; f"
  bd = branch --delete
  bm = switch master

;; Fetching and pulling
  fs = sync # from git-kit
  fa = fetch --all --tags --prune --recurse-submodules
  ff = pull --ff-only

;; Merging and rebasing

;; Committing
  cm = commit
  cme = commit --allow-empty

;; Cleaning
  cn = clean -dn
  cf = clean -df
; ccn = !echo git clean -ndx $(grep -v $(echo -e '^\\u0023') .git/info/exclude | awk '{print "-e \"" $0 "\""}' ORS=' ' )
; ccn = !echo git clean -ndx $(echo grep -v $(echo -e '\\u0023') .git/info/exclude | sed -e 's/^/-e /')
  ccn = clean -ndx
; Use an additional -f to remove submodules: https://stackoverflow.com/a/10761699/649581
  ccf = clean -ffdx
; Difference between caret (^) and tilde (~) http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde

  undo = reset "HEAD~1" --mixed -N
  mc = merge --no-ff
  root = rev-parse --show-toplevel
  proot = rev-parse --show-superproject-working-tree


;; Diffs
  s = status -sb
  ds = "!git diff --stat && git ls-files --exclude-standard --others"
  dm = diff master..HEAD

; History
  ls = log --oneline --decorate
  l = log -1 --oneline --decorate
; Find a named reference to commit (i.e. master~3)
  where = name-rev --name-only
  ref = rev-parse --short HEAD
  head = name-rev --name-only HEAD
; List branches that are ancestors of this commit
  has = branch --merged
; List branches this commit is an ancestor of
  in = branch --contains
  ign = "!git check-ignore *"
  ign-glob = "!git ign >/dev/null 2>&1 && git ign | rg -v '^#.*$|^ [[:space:]]*$' | tr '\\n' '|'"

; Stash ops
  sl = stash list
  ss = stash save -k -u
  sss = stash save
  sv = "!f() { git stash show -p \"stash@{"${1:-0}"}\"; }; f"
  sa = "!f() { git stash apply \"stash@{"${1:-0}"}\"; }; f"
  sp = "!f() { git stash pop \"stash@{"${1:-0}"}\"; }; f"
  sd = "!f() { git stash drop \"stash@{"${1:-0}"}\"; }; f"

  ps = push --set-upstream
  psf = push --set-upstream --force-with-lease origin HEAD

; Rebase current branch onto main default branch
; (conveniently also makes it possible to git rb --continue)
  rb = "!f(){ set -x; git rebase ${1:-$(git select-branch)}; };f"
; Rebase current branch onto its remote tracking branch
  rbo = "!f(){ set -x; git rebase -i ${2:-$(git select-remote)}/${1:-$(git head)}; };f"
; Rebase current branch onto main default branch (interactive)
  rbi = "!f(){ set -x; git rebase -i $(git merge-base HEAD ${1:-$(git select-branch)}); };f"
; Rebase current branch onto some other branch $1 (interactive)
; from branch topic-2: git rbif topic-1
  rbif = "!f(){ set -x; git rebase -i --onto ${1:-$(git select-branch)} $(git merge-base HEAD ${1:-$(git select-branch)}) HEAD; };f"

; Pipe text through this to annotate all git hashes
  annotate = name-rev --stdin

; ; Find if one file ever had into repository
; ff = "!git log --pretty=format: --name-status --all -M -B | sort -u | grep $1   ;"
; ; The same as above but showing copied files
; ffc = "!git log --pretty=format: --name-status --all -C -M -B | sort -u | grep $1 ;"


[color]
  diff = auto
  status = auto
  branch = auto
  pager = false
  ui = true

[core]
  excludesfile = ~/.gitignore
  ignorecase = false ; Handle with care, can break existing repos
  pager = less -qnmRFX
; pager = tig

[apply]
  whitespace = nowarn

[merge]
  tool = diffconflicts
  prompt = false
  conflictstyle = diff3

[diff]
  compactionHeuristic = true
	algorithm = histogram
	submodule = log

[submodule]
  fetchJobs = 0

[difftool]
  prompt = false

[push]
; http://stackoverflow.com/a/21866819
  default = current
  followTags = true

[pull]
  rebase = true

[rerere]
  enabled = true
  autoupdate = true

[transfer]
  ; https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0/discussion
  fsckobjects = true

[credential]
	helper = osxkeychain

; [sequence]
;   editor = interactive-rebase-tool

[fetch]
  prune = true

[mergetool "diffconflicts"]
  cmd = nvr --remote-wait -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
  trustExitCode = true

[mergetool]
  keepBackup = false

[hub]
  protocol = git

; include for all repositories inside $HOME/to/group
; https://git-scm.com/docs/git-config#_conditional_includes
[includeIf "gitdir:~/src/Reaktor/"]
	path = ~/src/Reaktor/gitconfig.ini
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[init]
	defaultBranch = main
