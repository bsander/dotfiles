[apply]
  whitespace = nowarn

[branch]
  autosetuprebase = always
  sort = -committerdate

[color]
  diff = auto
  status = auto
  branch = auto
  ui = true

[column]
  ui = auto

[commit]
  verbose = true

[core]
  excludesfile = ~/.gitignore
  ignorecase = false ; Handle with care, can break existing repos
  pager = delta

[delta]
  line-numbers = true
  navigate = true

[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
	submodule = log

[difftool]
  prompt = false

[fetch]
  prune = true
  pruneTags = true
  all = true

[help]
  autocorrect = prompt

[hub]
	protocol = https

[init]
	defaultBranch = main

[interactive]
  diffFilter = delta --color-only

[merge]
	tool = nvim
  prompt = false
  conflictstyle = zdiff3

[mergetool]
  keepBackup = false
	keepTemporaries = false

[push]
  default = simple
  autoSetupRemote = true
  followTags = true

[pull]
  rebase = true

[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true

[rerere]
  enabled = true
  autoupdate = true

[sequence]
	editor = interactive-rebase-tool

[submodule]
  fetchJobs = 0

[transfer]
; https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0/discussion
  fsckobjects = true

;; -----------------------------------------------------------------------------

[includeIf "gitdir:~/src/"]
  path = ~/src/dotfiles/gitconfig.ini
;; IAGL specific configs
[includeIf "gitdir:~/src/iagl/"]
  path = ~/src/iagl/gitconfig.ini
[url "gh-iagl:iagl-platform"]
  insteadOf = git@github.com:iagl-platform
[url "gh-iagl:iagl-innersource"]
  insteadOf = git@github.com:iagl-innersource

;; -----------------------------------------------------------------------------

[alias]
;; Submodule ops
; Execute any command on all subrepos
  subs = submodule foreach --recursive
; Execute git command on this and all subrepos
  all = all-exec git
; Ensure all submodules are checked out at pinned commits
  state = submodule update --init --recursive

;; Branches
  bb = switch
  ba = switch --track
  bc = "!f() { git switch -c $(slugify \"$*\"); }; f"
  bcf = "!f() { git switch -c feature/$(slugify \"$*\"); }; f"
  bd = branch --delete
  bdf = branch --delete --force
  bm = switch master

;; Fetching and pulling
  sync = "!hub sync && git trim --delete 'local,stray,merged:*'"
  fs = sync
  ff = pull --ff-only
  mm = submodule update --init --recursive

;; Merging and rebasing

;; Committing
  cm = commit
  cme = commit --allow-empty
  cma = commit --amend

;; Cleaning
  cn = clean -dn
  cf = clean -df
; ccn = !echo git clean -ndx $(grep -v $(echo -e '^\\u0023') .git/info/exclude | awk '{print "-e \"" $0 "\""}' ORS=' ' )
; ccn = !echo git clean -ndx $(echo grep -v $(echo -e '\\u0023') .git/info/exclude | sed -e 's/^/-e /')
; ccn = clean -ndx
  ccn = !git ls-files --others --ignored --exclude-from=.gitignore --directory | xargs -r git clean -ndx && git submodule foreach --recursive 'git ls-files --others --ignored --exclude-standard --directory | xargs -r git clean -ndx'
; Use an additional -f to remove submodules: https://stackoverflow.com/a/10761699/649581
  ; ccf = clean -ffdx
  ccf = !git ls-files --others --ignored --exclude-from=.gitignore --directory | xargs -r git clean -ffdx && git submodule foreach --recursive 'git ls-files --others --ignored --exclude-standard --directory | xargs -r git clean -ffdx'
; Difference between caret (^) and tilde (~) http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde

  undo = reset "HEAD~1" --mixed -N
  mc = merge --no-ff
  root = rev-parse --show-toplevel
  proot = rev-parse --show-superproject-working-tree


;; Diffs
  s = status -sb
  ds = "!git diff --stat && git ls-files --exclude-standard --others"
  dm = diff master..HEAD

; History
  ls = log --oneline --decorate
  l = log -1 --oneline --decorate
; Find a named reference to commit (i.e. master~3)
  where = name-rev --name-only
  ref = rev-parse --short HEAD
  head = name-rev --name-only HEAD
; List branches that are ancestors of this commit
  has = branch --merged
; List branches this commit is an ancestor of
  in = branch --contains
  ign = "!git check-ignore *"
  ign-glob = "!git ign >/dev/null 2>&1 && git ign | rg -v '^#.*$|^ [[:space:]]*$' | tr '\\n' '|'"

; Stash ops
  ss = "!echo Did you mean 'zz' or 'zs'?"
  zl = stash list
  zz = stash push --include-untracked
  zs = stash push --staged
  zv = "!f() { git stash show -p \"stash@{"${1:-0}"}\"; }; f"
  za = "!f() { git stash apply \"stash@{"${1:-0}"}\"; }; f"
  zp = "!f() { git stash pop \"stash@{"${1:-0}"}\"; }; f"
  zd = "!f() { git stash drop \"stash@{"${1:-0}"}\"; }; f"

  ps = push --set-upstream
  psf = push --set-upstream --force-with-lease origin HEAD

; git-imerge
  im = imerge merge
  irb = imerge rebase
  irh = imerge rebase-with-history
  ic = imerge continue
  if = imerge finish


; Rebase current branch onto main default branch
; (conveniently also makes it possible to git rb --continue)
  rb = "!f(){ set -x; git rebase ${1:-$(git select-branch)}; };f"
  rc = rebase --continue
; Rebase current branch onto its remote tracking branch
  rbo = "!f(){ set -x; git rebase -i ${2:-$(git select-remote)}/${1:-$(git head)}; };f"
; Rebase current branch onto main default branch (interactive)
  rbi = "!f(){ set -x; git rebase -i $(git merge-base HEAD ${1:-$(git select-branch)}); };f"
; Rebase current branch onto some other branch $1 (interactive)
; from branch topic-2: git rbif topic-1
  rbif = "!f(){ set -x; git rebase -i --onto ${1:-$(git select-branch)} $(git merge-base HEAD ${1:-$(git select-branch)}) HEAD; };f"

; Pipe text through this to annotate all git hashes
  annotate = name-rev --stdin

; Find if one file ever existed into repository
; ff = "!git log --pretty=format: --name-status --all -M -B | sort -u | grep $1 ;"
; The same as above but showing copied files
; ffc = "!git log --pretty=format: --name-status --all -C -M -B | sort -u | grep $1 ;"

; Regenerate merge conflicts to include base branch
conflict-3 = restore --conflict=zdiff3
conflict-2 = restore --conflict=merge

; Whoops, I did a git stash drop and all my changes are lost
show-dropped-stashes = "!f() { git fsck --unreachable | grep commit | cut -d\" \" -f3 | xargs git log --all; }; f"

; Whoops, I did a git reset --hard or git branch -f and now I lost my old branch
show-lost-branches = "!f() { git fsck --lost-found | grep commit | cut -d\" \" -f3 | xargs git log --all; }; f"

; Git blame that only shows the line you're interested in:
grep-blame = "!f() { git grep -n \"$1\" | awk -F \":\" 'system(\"git blame \"$1\" -L\"$2\",\"$2)'; }; f"

; You merged/squashed and deleted the branch from Gtihub UI. You did git fetch
; --prune. Now you still have your local, dead feature branches that you need
; to manually delete. This cleans all local leftover branches automagically:
cleanup = "!f() { \
  git branch -d $(git branch --format '%(refname:short)' --merged master --no-contains master); \
  git branch -v | \
  awk '{if ($3 == \"[gone]\") print $1}' | \
  xargs echo git branch -D; \
}; f"

; What have I committed since master
pending = log master..HEAD --pretty=oneline --abbrev-commit --format='%Cgreen%cr:%Creset %C(auto)%h%Creset %s'
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[user]
	name = Sander Bouwhuis
	email = sander.bouwhuis+iagl@avios.com
