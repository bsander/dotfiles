[hub]
  protocol = git
[user]
	name = Sander Bouwhuis
	email = sander@enrise.com
[branch]
  autosetuprebase = always
[alias]
  ## Submodule ops
  # Execute any command on all subrepos
  subs = submodule foreach --recursive
  # Execute git command on this and all subrepos
  all = all-exec git
  # Ensure all submodules are checked out at pinned commits
  state = submodule update --init --recursive

  ## Frequently used shortcuts
  co = checkout -q
  # Preserve uncommitted changes when switching branch
  com = checkout -m
  # Set up remote tracking for branch
  cot = checkout -t
  f = fetch --all --tags --prune --recurse-submodules
  cm = commit
  cme = commit --allow-empty
  b = branch -vv
  ba = branch -avv
  mt = mergetool
  cn = clean -ndx -e /.vscode
  # Use an additional -f to remove submodules: https://stackoverflow.com/a/10761699/649581
  cnf = clean -fdx -e /.vscode
  # Difference between caret (^) and tilde (~): http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde
  undo = reset "HEAD~1" --soft
  ff = merge --ff-only
  mc = merge --no-ff
  root = rev-parse --show-toplevel
  proot = rev-parse --show-superproject-working-tree

  ## git-kit shortcuts
  ts = topic-start
  fs = topic-start --topic feature
  rs = topic-start --topic release
  hs = topic-start --topic hotfix
  tf = topic-finish
  pr = pull-request
  mr = merge-request


  ## Status ops
  # Short status
  s = status -sb
  ds = "!git diff --stat && git ls-files --exclude-standard --others"
  # Side-by-side diff
  d = difftool -t icdiff
  # Unified diff
  du = "!git diff --color $@ | diff-so-fancy"

  # History
  ls = log --oneline --decorate
  l = log -1 --oneline --decorate
  # Find a named reference to commit (i.e. master~3)
  where = name-rev --name-only
  here = name-rev --name-only HEAD
  has = branch --merged
  in = branch --contains
  ref = rev-parse --short HEAD

  # Stash ops
  sl = stash list
  ss = stash save -k -u
  sss = stash save
  sv = "!f() { git stash show -p \"stash@{"${1:-0}"}\"; }; f"
  sa = "!f() { git stash apply \"stash@{"${1:-0}"}\"; }; f"
  sp = "!f() { git stash pop \"stash@{"${1:-0}"}\"; }; f"
  sd = "!f() { git stash drop \"stash@{"${1:-0}"}\"; }; f"
  sa = stash apply
  sp = stash pop
  sd = stash drop

  ps = push --set-upstream

  # Pipe text through this to annotate all git hashes
  annotate = name-rev --stdin

  # # Find if one file ever had into repository
  # ff = "!git log --pretty=format: --name-status --all -M -B | sort -u | grep $1   #"
  # # The same as above but showing copied files
  # ffc = "!git log --pretty=format: --name-status --all -C -M -B | sort -u | grep $1 #"

[color]
  diff = auto
  status = auto
  branch = auto
  ui = true
[core]
	excludesfile = /Users/Sander/.gitignore
  editor = vim
  commentchar = ";"
  pager = less -qnmRFX
[pager]
  difftool = true
[apply]
  whitespace = nowarn
[merge]
  tool = p4merge
  prompt = false
  keepBackup = false
	conflictstyle = diff3
[diff]
   compactionHeuristic = true
   tool = icdiff
[submodule]
  fetchJobs = 0
[difftool]
  prompt = false
[difftool "icdiff"]
  cmd = icdiff --tabsize=2 --line-numbers $LOCAL $REMOTE
[push]
  # http://stackoverflow.com/a/21866819
  default = current
  followTags = true
[pull]
	rebase = true
[rerere]
	enabled = true
	autoupdate = true
# https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0/discussion
[transfer]
  fsckobjects = true
[transfer]
  fsckobjects = true
[receive]
  fsckObjects = true
; [commit]
;   gpgSign = true
[kit]
	pr-template = /Users/Sander/src/dotfiles/git/pr-message.md
# 	pr-editor = subl -nw
